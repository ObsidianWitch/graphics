#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.1"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "Floor"
    {
        matrix4d xformOp:transform = ( (2.4000000953674316, 0, 0, 0), (0, 4.599999904632568, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Floor" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(0, 0, 0), (1, 1, 0)]
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 3, 2]
            rel material:binding = </root/_materials/WoodFlooring>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0, 0, 0), (1, 0, 0), (0, 1, 0), (1, 1, 0)]
            bool[] primvars:sharp_face = [1] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(0, 9.999999), (0, 0), (10.000002, 0), (9.999998, 10)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Scope "_materials"
    {
        def Material "WoodFlooring"
        {
            token outputs:surface.connect = </root/_materials/WoodFlooring/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/WoodFlooring/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.5
                float inputs:specular = 0.5
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/wood_flooring.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/WoodFlooring/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "White"
        {
            token outputs:surface.connect = </root/_materials/White/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.5
                float inputs:specular = 0.5
                token outputs:surface
            }
        }

        def Material "WoodFurniture"
        {
            token outputs:surface.connect = </root/_materials/WoodFurniture/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (1, 0.5647122, 0.2917709)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.5
                float inputs:specular = 0.5
                token outputs:surface
            }
        }

        def Material "WoodBorder"
        {
            token outputs:surface.connect = </root/_materials/WoodBorder/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.7529381, 0.40724066, 0.19120185)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.5
                float inputs:specular = 0.5
                token outputs:surface
            }
        }
    }

    def Xform "Wall_000"
    {
        matrix4d xformOp:transform = ( (0.02500000037252903, 0, 0, 0), (0, 0.699999988079071, 0, 0), (0, 0, 1.25, 0), (2.4000000953674316, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Wall_000" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(0, 0, 0), (2, 2, 2)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 7, 6, 6, 7, 5, 4, 4, 5, 1, 0, 2, 6, 4, 0, 7, 3, 1, 5]
            rel material:binding = </root/_materials/White>
            normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0, 0, 0), (0, 0, 2), (0, 2, 0), (0, 2, 2), (2, 0, 0), (2, 0, 2), (2, 2, 0), (2, 2, 2)]
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "Wall_001"
    {
        matrix4d xformOp:transform = ( (0.02500000037252903, 0, 0, 0), (0, 2.299999952316284, 0, 0), (0, 0, 1.25, 0), (-0.05000000447034836, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Wall_001" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(0, 0, 0), (2, 2, 2)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 7, 6, 6, 7, 5, 4, 4, 5, 1, 0, 2, 6, 4, 0, 7, 3, 1, 5]
            rel material:binding = </root/_materials/White>
            normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0, 0, 0), (0, 0, 2), (0, 2, 0), (0, 2, 2), (2, 0, 0), (2, 0, 2), (2, 2, 0), (2, 2, 2)]
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "Wall_002"
    {
        matrix4d xformOp:transform = ( (1.25, 0, 0, 0), (0, 0.02500000037252903, 0, 0), (0, 0, 1.25, 0), (-0.05000000074505806, 4.600000381469727, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Wall_002" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(0, 0, 0), (2, 2, 2)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 7, 6, 6, 7, 5, 4, 4, 5, 1, 0, 2, 6, 4, 0, 7, 3, 1, 5]
            rel material:binding = </root/_materials/White>
            normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0, 0, 0), (0, 0, 2), (0, 2, 0), (0, 2, 2), (2, 0, 0), (2, 0, 2), (2, 2, 0), (2, 2, 2)]
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "Wall_003"
    {
        matrix4d xformOp:transform = ( (1.25, 0, 0, 0), (0, 0.02500000037252903, 0, 0), (0, 0, 1.25, 0), (-0.05000000074505806, -0.05000000074505806, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Wall_003" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(0, 0, 0), (2, 2, 2)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 7, 6, 6, 7, 5, 4, 4, 5, 1, 0, 2, 6, 4, 0, 7, 3, 1, 5]
            rel material:binding = </root/_materials/White>
            normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0, 0, 0), (0, 0, 2), (0, 2, 0), (0, 2, 2), (2, 0, 0), (2, 0, 2), (2, 2, 0), (2, 2, 2)]
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "Wardrobe"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 3.6000003814697266, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Wardrobe" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-2.7939677e-9, 0, 0), (0.51000005, 1, 2)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 7, 6, 4, 5, 1, 0, 2, 6, 4, 0, 7, 3, 1, 5, 6, 7, 5, 4, 10, 27, 26, 14, 48, 8, 12, 49, 52, 11, 15, 53, 19, 18, 9, 13, 23, 22, 10, 14, 31, 19, 13, 28, 29, 18, 19, 31, 8, 21, 20, 12, 11, 24, 25, 15, 54, 55, 25, 24, 53, 15, 25, 55, 9, 30, 28, 13, 22, 23, 17, 16, 14, 26, 17, 23, 39, 35, 33, 37, 36, 32, 35, 39, 34, 38, 37, 33, 47, 43, 42, 46, 44, 40, 43, 47, 41, 45, 46, 42, 21, 50, 51, 20, 20, 51, 49, 12, 51, 50, 48, 49, 27, 16, 17, 26, 47, 46, 45, 44, 53, 55, 54, 52, 42, 43, 40, 41, 39, 37, 38, 36, 33, 35, 32, 34, 28, 30, 29, 31]
            rel material:binding = </root/_materials/WoodFurniture>
            normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, -1.1641555e-8, -1), (0, -1.1641555e-8, -1), (0, -1.1641555e-8, -1), (0, -1.1641555e-8, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1.1641554e-8, -1), (0, 1.1641554e-8, -1), (0, 1.1641554e-8, -1), (0, 1.1641554e-8, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 6.4692024e-8, 0), (1, 6.4692024e-8, 0), (1, 6.4692024e-8, 0), (1, 6.4692024e-8, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-2.7939677e-9, 0, 0), (-2.7939677e-9, 0, 2), (-2.7939677e-9, 1, 0), (-2.7939677e-9, 1, 2), (0.5, 0, 0), (0.5, 0, 2), (0.5, 1, 0), (0.5, 1, 2), (0.5, 0.01, 0.01), (0.5, 0.010000001, 1.99), (0.5, 0.99, 0.01), (0.5, 0.99, 1.99), (0.51000005, 0.01, 0.01), (0.51000005, 0.010000001, 1.99), (0.51000005, 0.99, 0.01), (0.51000005, 0.99, 1.99), (0.5, 0.51, 0.490125), (0.51000005, 0.51, 0.490125), (0.5, 0.48999992, 1.99), (0.51000005, 0.48999992, 1.99), (0.51000005, 0.49, 0.010000005), (0.5, 0.49, 0.010000005), (0.5, 0.51, 0.010000005), (0.51000005, 0.51, 0.010000005), (0.5, 0.51, 1.99), (0.51000005, 0.51, 1.99), (0.51000005, 0.99, 0.490125), (0.5, 0.99, 0.490125), (0.51000005, 0.010000001, 1.51), (0.5, 0.48999992, 1.51), (0.5, 0.010000001, 1.51), (0.51000005, 0.48999992, 1.51), (0.5, 0.48999992, 1.49), (0.51000005, 0.010000001, 1.49), (0.5, 0.010000001, 1.49), (0.51000005, 0.48999992, 1.49), (0.5, 0.48999992, 1.01), (0.51000005, 0.010000001, 1.01), (0.5, 0.010000001, 1.01), (0.51000005, 0.48999992, 1.01), (0.5, 0.48999992, 0.99), (0.5, 0.010000001, 0.99), (0.51000005, 0.010000001, 0.99), (0.51000005, 0.48999992, 0.99), (0.5, 0.48999992, 0.51), (0.5, 0.010000001, 0.51), (0.51000005, 0.010000001, 0.51), (0.51000005, 0.48999992, 0.51), (0.5, 0.01, 0.489875), (0.51000005, 0.01, 0.489875), (0.5, 0.49, 0.489875), (0.51000005, 0.49, 0.489875), (0.5, 0.99, 0.51), (0.51000005, 0.99, 0.51), (0.5, 0.51, 0.51), (0.51000005, 0.51, 0.51)]
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "WoodFurniture" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]
                rel material:binding = </root/_materials/WoodFurniture>
            }

            def GeomSubset "White" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5]
                rel material:binding = </root/_materials/White>
            }
        }
    }

    def Xform "Bookcase_000"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 3.6000003814697266, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Bookcase_000" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(0, -0.29999995, 0), (0.55, 2.3841858e-7, 0.8)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 3, 4, 4, 4, 4, 4, 3, 4, 3, 4, 4, 3, 4, 3, 4, 4, 4, 4, 4, 3, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [7, 3, 1, 5, 2, 6, 4, 0, 16, 5, 1, 22, 28, 3, 7, 34, 2, 33, 39, 6, 33, 32, 38, 39, 32, 31, 37, 38, 31, 30, 36, 37, 30, 29, 35, 36, 29, 28, 34, 35, 2, 11, 32, 33, 11, 31, 32, 11, 10, 30, 31, 10, 29, 30, 10, 3, 28, 29, 4, 21, 27, 0, 20, 19, 25, 26, 18, 17, 23, 24, 4, 15, 20, 21, 15, 19, 20, 15, 14, 18, 19, 14, 17, 18, 14, 5, 16, 17, 27, 26, 8, 0, 26, 25, 8, 25, 24, 9, 8, 24, 23, 9, 23, 22, 1, 9, 6, 13, 15, 4, 13, 12, 14, 15, 12, 7, 5, 14, 39, 38, 13, 6, 38, 37, 13, 37, 36, 12, 13, 36, 35, 12, 35, 34, 7, 12, 0, 8, 11, 2, 8, 9, 10, 11, 9, 1, 3, 10, 28, 22, 23, 29, 29, 23, 17, 35, 22, 28, 34, 16, 16, 34, 35, 17, 18, 24, 30, 36, 30, 24, 25, 31, 31, 25, 19, 37, 18, 36, 37, 19, 20, 26, 32, 38, 32, 26, 27, 33, 33, 27, 21, 39, 20, 38, 39, 21]
            rel material:binding = </root/_materials/White>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -0.99999994, -0.0000011641542), (0, -0.99999994, -0.0000011641542), (0, -0.99999994, -0.0000011641542), (0, -0.99999994, -0.0000011641542), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0.0000011641531), (0, -1, 0.0000011641531), (0, -1, 0.0000011641531), (0, -1, 0.0000011641531), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0, -0.29999995, 0), (0, -0.29999995, 0.8), (0, 2.3841858e-7, 0), (0, 2.3841858e-7, 0.8), (0.55, -0.29999995, 0), (0.55, -0.29999995, 0.8), (0.55, 2.3841858e-7, 0), (0.55, 2.3841858e-7, 0.8), (0, -0.29999995, 0.275), (0, -0.29999995, 0.545), (0, 2.3841858e-7, 0.545), (0, 2.3841858e-7, 0.275), (0.55, 2.3841858e-7, 0.545), (0.55, 2.3841858e-7, 0.275), (0.55, -0.29999995, 0.545), (0.55, -0.29999995, 0.275), (0.54, -0.29999995, 0.79), (0.54, -0.29999995, 0.545), (0.54, -0.29999995, 0.535), (0.54, -0.29999995, 0.275), (0.54, -0.29999995, 0.26500002), (0.54, -0.29999995, 0.010000001), (0.010000001, -0.29999995, 0.79), (0.010000001, -0.29999995, 0.545), (0.010000001, -0.29999995, 0.535), (0.010000001, -0.29999995, 0.275), (0.010000001, -0.29999995, 0.26500002), (0.010000001, -0.29999995, 0.010000001), (0.010000001, 2.3841858e-7, 0.79), (0.010000001, 2.3841858e-7, 0.545), (0.010000001, 2.3841858e-7, 0.535), (0.010000001, 2.3841858e-7, 0.275), (0.010000001, 2.3841858e-7, 0.26500002), (0.010000001, 2.3841858e-7, 0.010000001), (0.54, 2.3841858e-7, 0.79), (0.54, 2.3841858e-7, 0.545), (0.54, 2.3841858e-7, 0.535), (0.54, 2.3841858e-7, 0.275), (0.54, 2.3841858e-7, 0.26500002), (0.54, 2.3841858e-7, 0.010000001)]
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "Desk"
    {
        matrix4d xformOp:transform = ( (7.549790126404332e-8, -1, 0, 0), (1, 7.549790126404332e-8, 0, 0), (0, 0, 1, 0), (0.6500000357627869, 3.450000524520874, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Desk" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-7.1723116e-9, 0, -2.2351742e-8), (1.5, 0.70999986, 0.81)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [3, 1, 5, 7, 1, 3, 2, 0, 3, 7, 6, 2, 16, 14, 35, 32, 7, 5, 4, 6, 8, 9, 31, 30, 6, 4, 0, 2, 14, 15, 34, 35, 11, 10, 28, 29, 30, 31, 29, 28, 10, 8, 30, 28, 9, 11, 29, 31, 18, 16, 32, 33, 17, 19, 37, 38, 15, 18, 33, 34, 19, 13, 36, 37, 12, 17, 38, 39, 36, 39, 38, 37, 33, 32, 35, 34, 13, 12, 39, 36, 21, 20, 25, 26, 26, 25, 24, 27, 22, 23, 27, 24, 23, 21, 26, 27, 20, 22, 24, 25, 5, 1, 0, 4, 41, 40, 42, 43, 45, 47, 46, 44, 42, 40, 44, 46, 40, 41, 45, 44, 41, 43, 47, 45, 43, 42, 46, 47]
            rel material:binding = </root/_materials/WoodFurniture>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, -1.0173497e-8, 0), (-1, -1.0173497e-8, 0), (-1, -1.0173497e-8, 0), (-1, -1.0173497e-8, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 4.4509952e-7), (1, 0, 4.4509952e-7), (1, 0, 4.4509952e-7), (1, 0, 4.4509952e-7), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-5.960477e-7, 1, 0), (-5.960477e-7, 1, 0), (-5.960477e-7, 1, 0), (-5.960477e-7, 1, 0), (5.6363742e-8, 0, -1), (5.6363742e-8, 0, -1), (5.6363742e-8, 0, -1), (5.6363742e-8, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0.0000011920941, 0, -1), (0.0000011920941, 0, -1), (0.0000011920941, 0, -1), (0.0000011920941, 0, -1), (-1, 0, -6.1926903e-7), (-1, 0, -6.1926903e-7), (-1, 0, -6.1926903e-7), (-1, 0, -6.1926903e-7), (1, 0, 6.1926903e-7), (1, 0, 6.1926903e-7), (1, 0, 6.1926903e-7), (1, 0, 6.1926903e-7), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, -4.4268072e-7), (-1, 0, -4.4268072e-7), (-1, 0, -4.4268072e-7), (-1, 0, -4.4268072e-7), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 1.5481724e-7), (-1, 0, 1.5481724e-7), (-1, 0, 1.5481724e-7), (-1, 0, 1.5481724e-7), (1, 0, -1.5481724e-7), (1, 0, -1.5481724e-7), (1, 0, -1.5481724e-7), (1, 0, -1.5481724e-7), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (3.1043868e-8, 0, -1), (3.1043868e-8, 0, -1), (3.1043868e-8, 0, -1), (3.1043868e-8, 0, -1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0, 0, 0.75), (0, 0, 0.79999995), (-7.1723116e-9, 0.70499986, 0.75), (-7.1723116e-9, 0.70499986, 0.79999995), (1.5, 0, 0.75000006), (1.5, 0, 0.79999995), (1.5, 0.70499986, 0.75000006), (1.5, 0.70499986, 0.79999995), (1.43, 0.07000001, 0.77), (1.4799999, 0.07000004, 0.77000004), (1.43, 0.019999992, 0.77), (1.4799999, 0.019999992, 0.77000004), (0.069999896, 0.07000001, 0.77), (0.019999886, 0.07000001, 0.77), (0.06999989, 0.6350001, 0.77), (0.019999878, 0.6350001, 0.77), (0.06999989, 0.68500006, 0.77), (0.069999896, 0.019999992, 0.77), (0.019999878, 0.68500006, 0.77), (0.019999886, 0.019999992, 0.77), (1.4799999, 0.68500006, 0.77000004), (1.43, 0.68500006, 0.77000004), (1.4799999, 0.6350001, 0.77000004), (1.43, 0.6350001, 0.77000004), (1.4799998, 0.6350001, 3.7252903e-8), (1.4799998, 0.68500006, 3.7252903e-8), (1.4299998, 0.68500006, 3.7252903e-8), (1.4299998, 0.6350001, 3.7252903e-8), (1.4300004, 0.019999992, -2.2351742e-8), (1.4800004, 0.019999992, 3.7252903e-8), (1.4300004, 0.07000001, -2.2351742e-8), (1.4800004, 0.07000004, 3.7252903e-8), (0.07000023, 0.68500006, -2.2351742e-8), (0.02000022, 0.68500006, -2.2351742e-8), (0.02000022, 0.6350001, -2.2351742e-8), (0.07000023, 0.6350001, -2.2351742e-8), (0.019999886, 0.07000001, -2.2351742e-8), (0.019999886, 0.019999992, -2.2351742e-8), (0.069999896, 0.019999992, -2.2351742e-8), (0.069999896, 0.07000001, -2.2351742e-8), (-7.1723116e-9, 0.70499986, 0.74999994), (-7.1723116e-9, 0.70499986, 0.81), (1.5, 0.70499986, 0.75), (1.5, 0.70499986, 0.81), (-7.1723116e-9, 0.70999986, 0.74999994), (-7.1723116e-9, 0.70999986, 0.81), (1.5, 0.70999986, 0.75), (1.5, 0.70999986, 0.81)]
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "Nightstand"
    {
        matrix4d xformOp:transform = ( (7.549790126404332e-8, 1, 0, 0), (-1, 7.549790126404332e-8, 0, 0), (0, 0, 1, 0), (0.5, 1.1000003814697266, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Nightstand" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(0, -9.311444e-9, -1.8626451e-9), (0.5, 0.5, 0.5)]
            int[] faceVertexCounts = [4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 3, 4, 3, 4, 3, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [36, 42, 47, 45, 28, 31, 39, 41, 33, 21, 40, 5, 6, 8, 7, 7, 8, 12, 11, 11, 12, 10, 9, 9, 10, 6, 5, 7, 11, 9, 5, 12, 8, 6, 10, 13, 14, 16, 15, 15, 16, 38, 18, 18, 38, 2, 17, 17, 2, 14, 13, 15, 18, 17, 13, 38, 16, 14, 2, 19, 40, 21, 20, 20, 21, 25, 24, 24, 25, 23, 22, 20, 24, 22, 19, 25, 21, 40, 23, 26, 41, 28, 27, 27, 28, 31, 30, 30, 31, 39, 29, 23, 40, 19, 22, 27, 30, 29, 26, 35, 2, 38, 25, 28, 41, 23, 46, 43, 37, 44, 37, 43, 0, 32, 25, 33, 34, 28, 21, 33, 25, 14, 36, 37, 10, 2, 35, 36, 14, 10, 37, 32, 6, 28, 34, 31, 33, 44, 45, 34, 12, 16, 14, 10, 41, 26, 29, 39, 41, 39, 38, 16, 40, 23, 12, 8, 23, 41, 16, 12, 34, 4, 3, 35, 43, 42, 3, 0, 34, 39, 31, 45, 44, 37, 36, 33, 40, 8, 32, 32, 8, 6, 35, 38, 39, 34, 33, 1, 4, 34, 0, 3, 4, 1, 43, 46, 47, 42, 35, 3, 42, 36, 47, 46, 44, 45, 67, 53, 56, 64, 58, 50, 51, 59, 60, 48, 49, 62, 65, 57, 52, 66, 52, 68, 66, 55, 61, 63, 54, 61, 60, 62, 63, 55, 48, 60, 61, 67, 69, 53, 59, 53, 69, 58, 68, 52, 51, 64, 56, 50, 65, 54, 49, 53, 59, 51, 56, 63, 62, 49, 54, 61, 69, 68, 63, 48, 55, 64, 51, 54, 66, 67, 55, 54, 65, 66, 48, 51, 50, 49, 55, 67, 64, 52, 57, 50, 58, 50, 57, 65, 68, 58, 62, 63, 59, 69, 61, 60, 69, 67, 66, 68, 58, 59, 60, 62, 0, 1, 33, 32]
            rel material:binding = </root/_materials/WoodFurniture>
            normal3f[] normals = [(-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (0, -3.725292e-8, -1), (0, -3.725292e-8, -1), (0, -3.725292e-8, -1), (0, -3.725292e-8, -1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-2.6077015e-7, 1, -1.8626442e-7), (-2.6077015e-7, 1, -1.8626442e-7), (-2.6077015e-7, 1, -1.8626442e-7), (-2.6077015e-7, 1, -1.8626442e-7), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-3.7252846e-8, 0, 1), (-3.7252846e-8, 0, 1), (-3.7252846e-8, 0, 1), (-3.7252846e-8, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (2.980232e-7, -1, -7.4505806e-7), (2.980232e-7, -1, -7.4505806e-7), (2.980232e-7, -1, -7.4505806e-7), (2.980232e-7, -1, -7.4505806e-7), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-4.6566058e-9, -3.7252885e-8, -1), (-4.6566058e-9, -3.7252885e-8, -1), (-4.6566058e-9, -3.7252885e-8, -1), (-4.6566058e-9, -3.7252885e-8, -1), (0.99999994, -1.182632e-8, -2.1287375e-8), (0.99999994, -1.182632e-8, -2.1287375e-8), (0.99999994, -1.182632e-8, -2.1287375e-8), (0.99999994, -1.182632e-8, -2.1287375e-8), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-2.2204466e-14, -1, -7.4505823e-7), (-2.2204466e-14, -1, -7.4505823e-7), (-2.2204466e-14, -1, -7.4505823e-7), (-2.2204466e-14, -1, -7.4505823e-7), (6.51926e-8, 5.5511172e-15, -1), (6.51926e-8, 5.5511172e-15, -1), (6.51926e-8, 5.5511172e-15, -1), (6.51926e-8, 5.5511172e-15, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 4.6566133e-9, -1), (0, 4.6566133e-9, -1), (0, 4.6566133e-9, -1), (0, 4.6566133e-9, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 6.622739e-8, -1), (0, 6.622739e-8, -1), (0, 6.622739e-8, -1), (0, 6.622739e-8, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, -1.06436865e-7), (0, -1, -1.06436865e-7), (0, -1, -1.06436865e-7), (0, -1, -1.06436865e-7), (9.3110214e-7, 1, 0), (9.3110214e-7, 1, 0), (9.3110214e-7, 1, 0), (9.3110214e-7, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (9.3118916e-7, 1, 0), (9.3118916e-7, 1, 0), (9.3118916e-7, 1, 0), (9.3118916e-7, 1, 0), (-0.99999994, 0.0000014903969, 0), (-0.99999994, 0.0000014903969, 0), (-0.99999994, 0.0000014903969, 0), (0, -0.000002980226, 1), (0, -0.000002980226, 1), (0, -0.000002980226, 1), (0, -0.000002980226, 1), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, -3.3866428e-8, 0.99999994), (0, -3.3866428e-8, 0.99999994), (0, -3.3866428e-8, 0.99999994), (0, -3.3866428e-8, 0.99999994), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (1, 0, -6.7731996e-8), (1, 0, -6.7731996e-8), (1, 0, -6.7731996e-8), (-1, -2.6457759e-8, -0.0000014901011), (-1, -2.6457759e-8, -0.0000014901011), (-1, -2.6457759e-8, -0.0000014901011), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, -2.2837048e-8, -2.569167e-8), (1, -2.2837048e-8, -2.569167e-8), (1, -2.2837048e-8, -2.569167e-8), (1, -2.2837048e-8, -2.569167e-8), (-0.0000033484541, 6.6971616e-8, -1), (-0.0000033484541, 6.6971616e-8, -1), (-0.0000033484541, 6.6971616e-8, -1), (-0.0000033484541, 6.6971616e-8, -1), (0, -3.3866286e-8, 1), (0, -3.3866286e-8, 1), (0, -3.3866286e-8, 1), (0, -3.3866286e-8, 1), (4.901697e-8, -1, 0), (4.901697e-8, -1, 0), (4.901697e-8, -1, 0), (4.901697e-8, -1, 0), (-1, 4.281945e-8, 0), (-1, 4.281945e-8, 0), (-1, 4.281945e-8, 0), (-1, 4.281945e-8, 0), (-2.3875408e-8, 1, 1.5148657e-13), (-2.3875408e-8, 1, 1.5148657e-13), (-2.3875408e-8, 1, 1.5148657e-13), (-2.3875408e-8, 1, 1.5148657e-13), (9.311896e-7, 1, 0), (9.311896e-7, 1, 0), (9.311896e-7, 1, 0), (0, -1, -1.924734e-7), (0, -1, -1.924734e-7), (0, -1, -1.924734e-7), (0, -1, -1.924734e-7), (9.311018e-7, 1, 0), (9.311018e-7, 1, 0), (9.311018e-7, 1, 0), (0.0000024069077, 6.6971516e-8, -1), (0.0000024069077, 6.6971516e-8, -1), (0.0000024069077, 6.6971516e-8, -1), (0.0000024069077, 6.6971516e-8, -1), (1, -2.5870234e-8, 0), (1, -2.5870234e-8, 0), (1, -2.5870234e-8, 0), (-0.99999994, -2.9874045e-8, 0), (-0.99999994, -2.9874045e-8, 0), (-0.99999994, -2.9874045e-8, 0), (-0.99999994, -2.9874045e-8, 0), (0.99999994, -5.974809e-8, 0), (0.99999994, -5.974809e-8, 0), (0.99999994, -5.974809e-8, 0), (0.99999994, -5.974809e-8, 0), (0, -0.0000029802263, -1), (0, -0.0000029802263, -1), (0, -0.0000029802263, -1), (0, -0.0000029802263, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0, 0, 0.5), (0, 0.5, 0.5), (0.5, 0, 0.05), (0.5, 0, 0.5), (0.5, 0.5, 0.5), (0, 0, -1.8626451e-9), (0, 0, 0.049999997), (0, 0.05, -1.8626451e-9), (0, 0.05, 0.049999997), (0.05, 0, -1.8626451e-9), (0.05, 0, 0.049999997), (0.05, 0.05, -1.8626451e-9), (0.05, 0.05, 0.049999997), (0.45000002, 0, -1.8626451e-9), (0.45000002, 0, 0.049999997), (0.45000002, 0.05, -1.8626451e-9), (0.45000002, 0.05, 0.049999997), (0.5, 0, -1.8626451e-9), (0.5, 0.05, -1.8626451e-9), (0, 0.45000002, 0), (0, 0.5, 0), (0, 0.5, 0.049999997), (0.05, 0.45000002, 0), (0.05, 0.45000002, 0.049999997), (0.05, 0.5, 0), (0.05, 0.5, 0.049999997), (0.45000002, 0.45000002, 0), (0.45000002, 0.5, 0), (0.45000002, 0.5, 0.049999997), (0.5, 0.45000002, 0), (0.5, 0.5, 0), (0.5, 0.5, 0.049999997), (0, 0, 0.1), (0, 0.5, 0.1), (0.5, 0.5, 0.1), (0.5, 0, 0.1), (0.45000002, 0, 0.1), (0.050000012, 0, 0.1), (0.5, 0.050000027, 0.05), (0.5, 0.45, 0.049999997), (0, 0.45, 0.049999997), (0.45000002, 0.45, 0.05), (0.45000002, 0, 0.45), (0.050000012, 0, 0.45), (0.050000012, 0.44999996, 0.1), (0.45000002, 0.44999996, 0.1), (0.050000027, 0.44999996, 0.45000002), (0.45000002, 0.44999996, 0.45000002), (0.45000002, 0.44999996, 0.30000007), (0.05000002, 0.44999996, 0.30000007), (0.050000027, 0.44999996, 0.45000002), (0.45000002, 0.44999996, 0.45000002), (0.059999526, -9.311444e-9, 0.45), (0.43999964, 9.311381e-9, 0.45), (0.050000012, 0, 0.30000004), (0.45000002, 0, 0.30000004), (0.45000002, 0, 0.45), (0.050000012, 0, 0.45), (0.059999526, 0.44, 0.45000002), (0.43999967, 0.44, 0.45000002), (0.43999967, 0.44, 0.30000007), (0.43999964, 0.01000003, 0.30000007), (0.059999526, 0.44, 0.30000007), (0.05999954, 0.010000011, 0.30000007), (0.45000002, 0, 0.43999994), (0.050000012, 0, 0.43999994), (0.059999526, -9.311444e-9, 0.43999994), (0.43999964, 9.311381e-9, 0.43999994), (0.05999954, 0.010000011, 0.4399999), (0.43999964, 0.01000003, 0.4399999)]
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "Bed"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Bed" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-5.9604645e-8, -5.9604645e-8, -0.000064864755), (1.8000001, 0.9000001, 0.39999998)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 7, 7, 2, 4, 11, 11, 4, 3, 9, 9, 3, 1, 0, 7, 11, 9, 0, 4, 2, 1, 3, 5, 0, 7, 6, 6, 7, 11, 10, 10, 11, 9, 8, 8, 9, 0, 5, 6, 10, 8, 5, 12, 13, 15, 14, 14, 15, 19, 18, 18, 19, 17, 16, 16, 17, 13, 12, 14, 18, 16, 12, 19, 15, 13, 17, 20, 21, 23, 22, 22, 23, 27, 26, 26, 27, 25, 24, 24, 25, 21, 20, 22, 26, 24, 20, 27, 23, 21, 25, 28, 29, 31, 30, 30, 31, 35, 34, 34, 35, 33, 32, 32, 33, 29, 28, 30, 34, 32, 28, 35, 31, 29, 33, 36, 37, 39, 38, 38, 39, 43, 42, 42, 43, 41, 40, 40, 41, 37, 36, 38, 42, 40, 36, 43, 39, 37, 41]
            rel material:binding = </root/_materials/WoodFurniture>
            normal3f[] normals = [(-1, -9.934108e-8, -1.986822e-7), (-1, -9.934108e-8, -1.986822e-7), (-1, -9.934108e-8, -1.986822e-7), (-1, -9.934108e-8, -1.986822e-7), (0, 1, -4.856675e-7), (0, 1, -4.856675e-7), (0, 1, -4.856675e-7), (0, 1, -4.856675e-7), (1, 0, -7.947287e-7), (1, 0, -7.947287e-7), (1, 0, -7.947287e-7), (1, 0, -7.947287e-7), (-4.967054e-8, -1, -1.9868217e-7), (-4.967054e-8, -1, -1.9868217e-7), (-4.967054e-8, -1, -1.9868217e-7), (-4.967054e-8, -1, -1.9868217e-7), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, -9.934108e-8, -2.9802322e-7), (-1, -9.934108e-8, -2.9802322e-7), (-1, -9.934108e-8, -2.9802322e-7), (-1, -9.934108e-8, -2.9802322e-7), (0, 1, 6.622739e-7), (0, 1, 6.622739e-7), (0, 1, 6.622739e-7), (0, 1, 6.622739e-7), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-4.9670547e-8, -1, -2.9802328e-7), (-4.9670547e-8, -1, -2.9802328e-7), (-4.9670547e-8, -1, -2.9802328e-7), (-4.9670547e-8, -1, -2.9802328e-7), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(1.1920929e-7, 1.1920929e-7, 0.25), (0, 0, 0.39999998), (0, 0.9000001, 0.39999998), (1.8000001, 0, 0.39999998), (1.8000001, 0.9000001, 0.39999998), (5.9604645e-8, 5.9604645e-8, 0.15), (5.9604645e-8, 0.90000004, 0.15), (-5.9604645e-8, 0.90000004, 0.25), (1.8, 5.9604645e-8, 0.15), (1.8, -5.9604645e-8, 0.25), (1.8, 0.90000004, 0.15), (1.8, 0.90000004, 0.25), (0.010000005, 0.010000002, 9.313226e-10), (0.010000005, 0.010000002, 0.16), (0.010000005, 0.06, 9.313226e-10), (0.010000005, 0.06, 0.16), (0.059999995, 0.010000002, 9.313226e-10), (0.059999995, 0.010000002, 0.16), (0.059999995, 0.06, 9.313226e-10), (0.059999995, 0.06, 0.16), (1.74, 0.010000001, -6.9849193e-9), (1.74, 0.010000001, 0.16), (1.74, 0.06, -6.9849193e-9), (1.74, 0.06, 0.16), (1.79, 0.010000001, -6.9849193e-9), (1.79, 0.010000001, 0.16), (1.79, 0.06, -6.9849193e-9), (1.79, 0.06, 0.16), (0.010000005, 0.84000003, 0.000064857304), (0.010000005, 0.84000003, 0.16006485), (0.010000005, 0.89000005, 0.000064857304), (0.010000005, 0.89000005, 0.16006485), (0.059999995, 0.84000003, 0.000064857304), (0.059999995, 0.84000003, 0.16006485), (0.059999995, 0.89000005, 0.000064857304), (0.059999995, 0.89000005, 0.16006485), (1.74, 0.84000003, -0.000064864755), (1.74, 0.84000003, 0.15993515), (1.74, 0.89000005, -0.000064864755), (1.74, 0.89000005, 0.15993515), (1.79, 0.84000003, -0.000064864755), (1.79, 0.84000003, 0.15993515), (1.79, 0.89000005, -0.000064864755), (1.79, 0.89000005, 0.15993515)]
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "WoodFurniture" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]
                rel material:binding = </root/_materials/WoodFurniture>
            }

            def GeomSubset "White" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5]
                rel material:binding = </root/_materials/White>
            }
        }
    }

    def Xform "Door"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.424999952316284, 1.4000003337860107, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Door" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.054999884, 0, 0), (0.054999884, 0.9000001, 2.1)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [52, 33, 3, 40, 40, 3, 7, 42, 48, 37, 5, 44, 44, 5, 1, 39, 31, 34, 4, 0, 10, 8, 9, 11, 14, 15, 13, 12, 9, 8, 12, 13, 8, 10, 14, 12, 11, 9, 13, 15, 10, 11, 15, 14, 18, 16, 17, 19, 22, 23, 21, 20, 17, 16, 25, 27, 16, 18, 26, 25, 19, 17, 27, 24, 18, 19, 24, 26, 24, 27, 21, 23, 29, 27, 25, 20, 21, 26, 24, 29, 28, 25, 26, 28, 22, 20, 28, 29, 23, 22, 2, 6, 35, 30, 30, 35, 34, 31, 42, 7, 36, 46, 46, 36, 37, 48, 39, 1, 32, 50, 50, 32, 33, 52, 31, 51, 53, 30, 51, 50, 52, 53, 0, 38, 51, 31, 38, 39, 50, 51, 35, 47, 49, 34, 47, 46, 48, 49, 6, 43, 47, 35, 43, 42, 46, 47, 4, 45, 38, 0, 45, 44, 39, 38, 34, 49, 45, 4, 49, 48, 44, 45, 2, 41, 43, 6, 41, 40, 42, 43, 30, 53, 41, 2, 53, 52, 40, 41, 33, 36, 7, 3, 32, 37, 36, 33, 37, 32, 1, 5, 40, 84, 57, 3, 90, 86, 55, 83, 86, 39, 1, 55, 31, 0, 54, 80, 60, 61, 59, 58, 64, 62, 63, 65, 59, 63, 62, 58, 58, 62, 64, 60, 61, 65, 63, 59, 60, 64, 65, 61, 68, 69, 67, 66, 72, 70, 71, 73, 67, 77, 75, 66, 66, 75, 76, 68, 69, 74, 77, 67, 68, 76, 74, 69, 74, 79, 73, 71, 77, 77, 71, 70, 75, 76, 78, 79, 74, 75, 70, 72, 78, 76, 78, 72, 73, 79, 2, 30, 81, 56, 30, 31, 80, 81, 84, 88, 82, 57, 88, 90, 83, 82, 81, 80, 91, 89, 89, 91, 90, 88, 56, 81, 89, 85, 85, 89, 88, 84, 54, 0, 38, 87, 87, 38, 39, 86, 80, 54, 87, 91, 91, 87, 86, 90, 2, 56, 85, 41, 41, 85, 84, 40, 33, 3, 57, 82, 32, 33, 82, 83, 83, 55, 1, 32]
            rel material:binding = </root/_materials/WoodFurniture>
            normal3f[] normals = [(0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-0.000002633706, 0, -1), (-0.000002633706, 0, -1), (-0.000002633706, 0, -1), (-0.000002633706, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0, 0.9000001, 0), (0, 0.9000001, 2.1), (0, 0, 0), (0, 0, 2.1), (0.024999887, 0.9000001, 0), (0.024999887, 0.9000001, 2.1), (0.024999887, 0, 0), (0.024999887, 0, 2.1), (0.02499989, 0.8800001, 0.96), (0.02499989, 0.8800001, 1.2), (0.02499989, 0.8400001, 0.96), (0.02499989, 0.8400001, 1.2), (0.03499988, 0.8800001, 0.96), (0.03499988, 0.8800001, 1.2), (0.03499988, 0.8400001, 0.96), (0.03499988, 0.8400001, 1.2), (0.034999896, 0.86499965, 1.0799999), (0.034999896, 0.86499965, 1.09), (0.034999896, 0.85499966, 1.0799999), (0.034999896, 0.85499966, 1.09), (0.054999884, 0.86499965, 1.0799999), (0.054999884, 0.86499965, 1.09), (0.054999884, 0.7649997, 1.0799999), (0.054999884, 0.7649997, 1.09), (0.044999894, 0.85499966, 1.09), (0.044999894, 0.86499965, 1.0799999), (0.044999894, 0.85499966, 1.0799999), (0.044999894, 0.86499965, 1.09), (0.044999894, 0.7649997, 1.0799999), (0.044999894, 0.7649997, 1.09), (0, 0.020000018, 0), (0, 0.88, 0), (0, 0.88, 2.1), (0, 0.019999988, 2.1), (0.024999887, 0.88, 0), (0.024999887, 0.019999988, 0), (0.024999887, 0.020000018, 2.1), (0.024999887, 0.88, 2.1), (0, 0.9000001, 0.020000052), (0, 0.9000001, 2.08), (0, 0, 2.08), (0, 0, 0.019999992), (0.024999887, 0, 2.08), (0.024999887, 0, 0.019999992), (0.024999887, 0.9000001, 2.08), (0.024999887, 0.9000001, 0.019999992), (0.024999887, 0.020000018, 2.08), (0.024999887, 0.019999988, 0.019999992), (0.024999887, 0.88, 2.08), (0.024999887, 0.88, 0.019999992), (0, 0.88, 2.08), (0, 0.88, 0.019999992), (0, 0.019999988, 2.08), (0, 0.019999988, 0.019999992), (-0.024999887, 0.9000001, 0), (-0.024999887, 0.9000001, 2.1), (-0.024999887, 0, 0), (-0.024999887, 0, 2.1), (-0.02499989, 0.8800001, 0.96), (-0.02499989, 0.8800001, 1.2), (-0.02499989, 0.8400001, 0.96), (-0.02499989, 0.8400001, 1.2), (-0.03499988, 0.8800001, 0.96), (-0.03499988, 0.8800001, 1.2), (-0.03499988, 0.8400001, 0.96), (-0.03499988, 0.8400001, 1.2), (-0.034999896, 0.86499965, 1.0799999), (-0.034999896, 0.86499965, 1.09), (-0.034999896, 0.85499966, 1.0799999), (-0.034999896, 0.85499966, 1.09), (-0.054999884, 0.86499965, 1.0799999), (-0.054999884, 0.86499965, 1.09), (-0.054999884, 0.7649997, 1.0799999), (-0.054999884, 0.7649997, 1.09), (-0.044999894, 0.85499966, 1.09), (-0.044999894, 0.86499965, 1.0799999), (-0.044999894, 0.85499966, 1.0799999), (-0.044999894, 0.86499965, 1.09), (-0.044999894, 0.7649997, 1.0799999), (-0.044999894, 0.7649997, 1.09), (-0.024999887, 0.88, 0), (-0.024999887, 0.019999988, 0), (-0.024999887, 0.020000018, 2.1), (-0.024999887, 0.88, 2.1), (-0.024999887, 0, 2.08), (-0.024999887, 0, 0.019999992), (-0.024999887, 0.9000001, 2.08), (-0.024999887, 0.9000001, 0.019999992), (-0.024999887, 0.020000018, 2.08), (-0.024999887, 0.019999988, 0.019999992), (-0.024999887, 0.88, 2.08), (-0.024999887, 0.88, 0.019999992)]
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "WoodFurniture" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [33, 73]
                rel material:binding = </root/_materials/WoodFurniture>
            }

            def GeomSubset "White" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67]
                rel material:binding = </root/_materials/White>
            }

            def GeomSubset "WoodBorder" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84]
                rel material:binding = </root/_materials/WoodBorder>
            }
        }
    }

    def Xform "Wall_004"
    {
        matrix4d xformOp:transform = ( (0.02500000037252903, 0, 0, 0), (0, 1.1499998569488525, 0, 0), (0, 0, 1.25, 0), (2.4000000953674316, 2.299999952316284, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Wall_004" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(0, 0, 0), (2, 2, 2)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 7, 6, 6, 7, 5, 4, 4, 5, 1, 0, 2, 6, 4, 0, 7, 3, 1, 5]
            rel material:binding = </root/_materials/White>
            normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0, 0, 0), (0, 0, 2), (0, 2, 0), (0, 2, 2), (2, 0, 0), (2, 0, 2), (2, 2, 0), (2, 2, 2)]
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "Wall_005"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.4000000953674316, 1.399999976158142, 2.1000001430511475, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Wall_005" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-2.9802322e-8, 0, 0), (0.049999744, 0.9000001, 0.4000001)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [7, 3, 1, 5, 0, 4, 5, 1, 0, 1, 3, 2, 2, 3, 7, 6, 4, 0, 2, 6, 4, 6, 7, 5]
            rel material:binding = </root/_materials/White>
            normal3f[] normals = [(0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.049999744, 0.9000001, 0), (0.049999744, 0, 0), (0.049999744, 0.9000001, 0.4000001), (0.049999744, 0, 0.4000001), (-2.9802322e-8, 0.9000001, 0), (-2.9802322e-8, 0, 0), (-2.9802322e-8, 0.9000001, 0.4000001), (-2.9802322e-8, 0, 0.4000001)]
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "Bookcase_001"
    {
        matrix4d xformOp:transform = ( (-1, 1.5099580252808664e-7, 0, 0), (-1.5099580252808664e-7, -1, 0, 0), (0, 0, 1, 0), (2.4000000953674316, 0.9000000357627869, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Bookcase_001" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-1.1175871e-8, -2.9802322e-8, -2.9802322e-8), (0.3, 0.90000004, 1.7500001)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [8, 9, 11, 10, 10, 11, 15, 14, 14, 15, 13, 12, 12, 13, 9, 8, 10, 14, 12, 8, 15, 11, 9, 13, 16, 17, 19, 18, 18, 19, 23, 22, 22, 23, 21, 20, 20, 21, 17, 16, 18, 22, 20, 16, 23, 19, 17, 21, 24, 25, 27, 26, 26, 27, 31, 30, 30, 31, 29, 28, 28, 29, 25, 24, 26, 30, 28, 24, 31, 27, 25, 29, 32, 33, 35, 34, 34, 35, 39, 38, 38, 39, 37, 36, 36, 37, 33, 32, 34, 38, 36, 32, 39, 35, 33, 37, 7, 3, 1, 5, 2, 6, 4, 0, 56, 7, 5, 62, 68, 1, 3, 74, 0, 73, 79, 2, 92, 72, 78, 94, 72, 71, 77, 78, 71, 70, 76, 77, 70, 69, 75, 76, 69, 68, 74, 75, 81, 40, 72, 92, 40, 41, 71, 72, 41, 42, 70, 71, 42, 43, 69, 70, 43, 1, 68, 69, 6, 61, 67, 4, 68, 62, 63, 69, 60, 59, 65, 66, 69, 63, 57, 75, 58, 57, 63, 64, 56, 74, 75, 57, 84, 51, 60, 88, 51, 50, 59, 60, 50, 49, 58, 59, 49, 48, 57, 58, 48, 7, 56, 57, 86, 55, 40, 81, 55, 54, 41, 40, 54, 53, 42, 41, 53, 52, 43, 42, 52, 5, 1, 43, 90, 66, 55, 86, 66, 65, 54, 55, 65, 64, 53, 54, 64, 63, 52, 53, 63, 62, 5, 52, 82, 47, 51, 84, 47, 46, 50, 51, 46, 45, 49, 50, 45, 44, 48, 49, 44, 3, 7, 48, 94, 78, 47, 82, 78, 77, 46, 47, 77, 76, 45, 46, 76, 75, 44, 45, 75, 74, 3, 44, 79, 95, 83, 2, 95, 94, 82, 83, 2, 83, 85, 6, 83, 82, 84, 85, 67, 91, 87, 4, 91, 90, 86, 87, 4, 87, 80, 0, 87, 86, 81, 80, 6, 85, 89, 61, 85, 84, 88, 89, 62, 56, 74, 68, 89, 88, 90, 91, 0, 80, 93, 73, 80, 81, 92, 93, 73, 93, 95, 79, 93, 92, 94, 95, 58, 64, 70, 76, 58, 76, 77, 59, 71, 65, 59, 77, 70, 64, 65, 71, 60, 66, 72, 78, 60, 78, 94, 88, 88, 94, 92, 90, 72, 66, 90, 92, 89, 91, 93, 95, 89, 95, 79, 61, 73, 67, 61, 79, 93, 91, 67, 73]
            rel material:binding = </root/_materials/WoodFurniture>
            normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 2.70733e-8, 0), (1, 2.70733e-8, 0), (1, 2.70733e-8, 0), (1, 2.70733e-8, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, -2.7073371e-8, 0), (1, -2.7073371e-8, 0), (1, -2.7073371e-8, 0), (1, -2.7073371e-8, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1.4537717e-7, 0.99999994), (0, -1.4537717e-7, 0.99999994), (0, -1.4537717e-7, 0.99999994), (0, -1.4537717e-7, 0.99999994), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, -5.3989726e-7, 0), (1, -5.3989726e-7, 0), (1, -5.3989726e-7, 0), (1, -5.3989726e-7, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 5.398969e-7, 0), (1, 5.398969e-7, 0), (1, 5.398969e-7, 0), (1, 5.398969e-7, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0, -1.4537717e-7, 0.99999994), (0, -1.4537717e-7, 0.99999994), (0, -1.4537717e-7, 0.99999994), (0, -1.4537717e-7, 0.99999994), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1.4537717e-7, -0.99999994), (0, 1.4537717e-7, -0.99999994), (0, 1.4537717e-7, -0.99999994), (0, 1.4537717e-7, -0.99999994), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -2.9075434e-7, 0.99999994), (0, -2.9075434e-7, 0.99999994), (0, -2.9075434e-7, 0.99999994), (0, -2.9075434e-7, 0.99999994), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1.4537717e-7, 0.99999994), (0, -1.4537717e-7, 0.99999994), (0, -1.4537717e-7, 0.99999994), (0, -1.4537717e-7, 0.99999994), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 1.4537717e-7, -0.99999994), (0, 1.4537717e-7, -0.99999994), (0, 1.4537717e-7, -0.99999994), (0, 1.4537717e-7, -0.99999994), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1.4537717e-7, 0.99999994), (0, -1.4537717e-7, 0.99999994), (0, -1.4537717e-7, 0.99999994), (0, -1.4537717e-7, 0.99999994), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0, 0, 0.25000003), (0, 0, 1.7500001), (0, 0.90000004, 0.25000003), (0, 0.90000004, 1.7500001), (0.3, 0, 0.25000003), (0.3, 0, 1.7500001), (0.3, 0.90000004, 0.25000003), (0.3, 0.90000004, 1.7500001), (-1.1175871e-8, 0, -1.4901161e-8), (-1.1175871e-8, 0, 0.25), (-1.1175871e-8, 0.04, -1.4901161e-8), (-1.1175871e-8, 0.04, 0.25), (0.04000001, 0, -1.4901161e-8), (0.04000001, 0, 0.25), (0.04000001, 0.04, -1.4901161e-8), (0.04000001, 0.04, 0.25), (-1.1175871e-8, 0.86, -2.9802322e-8), (-1.1175871e-8, 0.86, 0.25), (-1.1175871e-8, 0.90000004, -2.9802322e-8), (-1.1175871e-8, 0.90000004, 0.25), (0.04000001, 0.86, -2.9802322e-8), (0.04000001, 0.86, 0.25), (0.04000001, 0.90000004, -2.9802322e-8), (0.04000001, 0.90000004, 0.25), (0.26, -2.9802322e-8, -1.4901161e-8), (0.26, -2.9802322e-8, 0.25), (0.26, 0.03999997, -1.4901161e-8), (0.26, 0.03999997, 0.25), (0.3, -2.9802322e-8, -1.4901161e-8), (0.3, -2.9802322e-8, 0.25), (0.3, 0.03999997, -1.4901161e-8), (0.3, 0.03999997, 0.25), (0.26, 0.86, -2.9802322e-8), (0.26, 0.86, 0.25), (0.26, 0.9, -2.9802322e-8), (0.26, 0.9, 0.25), (0.3, 0.86, -2.9802322e-8), (0.3, 0.86, 0.25), (0.3, 0.9, -2.9802322e-8), (0.3, 0.9, 0.25), (0, 0, 0.98000014), (0, 0, 1.02), (0, 0, 1.3449999), (0, 0, 1.3849999), (0, 0.90000004, 1.3849999), (0, 0.90000004, 1.3449999), (0, 0.90000004, 1.02), (0, 0.90000004, 0.98), (0.3, 0.90000004, 1.3849999), (0.3, 0.90000004, 1.3449999), (0.3, 0.90000004, 1.02), (0.3, 0.90000004, 0.98), (0.3, 0, 1.3849999), (0.3, 0, 1.3449999), (0.3, 0, 1.02), (0.3, 0, 0.98), (0.3, 0.86, 1.7100002), (0.3, 0.86, 1.3849999), (0.3, 0.86, 1.3449999), (0.3, 0.86, 1.02), (0.3, 0.86, 0.98), (0.3, 0.86, 0.29000002), (0.3, 0.03999999, 1.71), (0.3, 0.03999999, 1.3849998), (0.3, 0.03999999, 1.3449998), (0.3, 0.03999999, 1.0199997), (0.3, 0.03999999, 0.98), (0.3, 0.03999999, 0.2899999), (0, 0.03999999, 1.71), (0, 0.03999999, 1.3849998), (0, 0.03999999, 1.3449998), (0, 0.03999999, 1.0199997), (0, 0.03999999, 0.98), (0, 0.03999999, 0.2899999), (0, 0.86, 1.7100002), (0, 0.86, 1.3849999), (0, 0.86, 1.3449999), (0, 0.86, 1.02), (0, 0.86, 0.98), (0, 0.86, 0.29000002), (0, 0, 0.615), (0, 0, 0.65500003), (0, 0.90000004, 0.655), (0, 0.90000004, 0.615), (0.3, 0.90000004, 0.655), (0.3, 0.90000004, 0.615), (0.3, 0, 0.655), (0.3, 0, 0.615), (0.3, 0.86, 0.655), (0.3, 0.86, 0.615), (0.3, 0.03999999, 0.65499985), (0.3, 0.03999999, 0.6149999), (0, 0.03999999, 0.65499985), (0, 0.03999999, 0.6149999), (0, 0.86, 0.655), (0, 0.86, 0.615)]
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            uniform token subdivisionScheme = "none"
        }
    }
}

